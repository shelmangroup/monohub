// Code generated by protoc-gen-go. DO NOT EDIT.
// source: monohub.proto

package monohub

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingRequest) Reset()         { *m = PingRequest{} }
func (m *PingRequest) String() string { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()    {}
func (*PingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dc5046b3fe2855a, []int{0}
}

func (m *PingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingRequest.Unmarshal(m, b)
}
func (m *PingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingRequest.Marshal(b, m, deterministic)
}
func (m *PingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingRequest.Merge(m, src)
}
func (m *PingRequest) XXX_Size() int {
	return xxx_messageInfo_PingRequest.Size(m)
}
func (m *PingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PingRequest proto.InternalMessageInfo

type PingReply struct {
	Version              string   `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingReply) Reset()         { *m = PingReply{} }
func (m *PingReply) String() string { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()    {}
func (*PingReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_3dc5046b3fe2855a, []int{1}
}

func (m *PingReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingReply.Unmarshal(m, b)
}
func (m *PingReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingReply.Marshal(b, m, deterministic)
}
func (m *PingReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingReply.Merge(m, src)
}
func (m *PingReply) XXX_Size() int {
	return xxx_messageInfo_PingReply.Size(m)
}
func (m *PingReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PingReply.DiscardUnknown(m)
}

var xxx_messageInfo_PingReply proto.InternalMessageInfo

func (m *PingReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "monohub.PingRequest")
	proto.RegisterType((*PingReply)(nil), "monohub.PingReply")
}

func init() { proto.RegisterFile("monohub.proto", fileDescriptor_3dc5046b3fe2855a) }

var fileDescriptor_3dc5046b3fe2855a = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd1, 0x4d, 0x4e, 0xc2, 0x40,
	0x14, 0x07, 0xf0, 0xe0, 0x57, 0xe5, 0x29, 0x02, 0x4f, 0xe5, 0xa3, 0x71, 0x61, 0x9a, 0x98, 0xb8,
	0xa2, 0x51, 0x6f, 0x80, 0x1b, 0x37, 0x24, 0x86, 0xe8, 0xca, 0x55, 0x4b, 0x1e, 0xd0, 0xa4, 0xcc,
	0xab, 0x33, 0x03, 0x09, 0x21, 0x6c, 0xbc, 0x82, 0x07, 0xf0, 0x50, 0x5e, 0xc1, 0x83, 0x98, 0xe9,
	0x74, 0x48, 0x03, 0xec, 0xfa, 0xff, 0x4f, 0xde, 0x2f, 0xd3, 0x79, 0x50, 0x9b, 0xb1, 0xe0, 0xe9,
	0x3c, 0xee, 0x65, 0x92, 0x35, 0xa3, 0x57, 0x44, 0xff, 0x7c, 0xc4, 0xb3, 0x59, 0xa2, 0x6d, 0xed,
	0x43, 0x9c, 0x72, 0xec, 0xbe, 0xb5, 0x24, 0x2a, 0xbe, 0xeb, 0x92, 0xc6, 0x24, 0x49, 0x8c, 0x5c,
	0x71, 0x33, 0x61, 0x9e, 0xa4, 0x14, 0x46, 0x59, 0x12, 0x46, 0x42, 0xb0, 0x8e, 0x74, 0xc2, 0x42,
	0xd9, 0xd3, 0xa0, 0x06, 0x67, 0xaf, 0x89, 0x98, 0x0c, 0xe9, 0x73, 0x4e, 0x4a, 0x07, 0x77, 0x50,
	0xb5, 0x31, 0x4b, 0x97, 0xd8, 0x01, 0x6f, 0x41, 0x52, 0x25, 0x2c, 0x3a, 0x95, 0xdb, 0xca, 0x7d,
	0x75, 0xe8, 0xe2, 0xe3, 0xcf, 0x21, 0x78, 0x03, 0x16, 0xfc, 0x32, 0x8f, 0xb1, 0x0f, 0x47, 0x66,
	0x04, 0xaf, 0x7a, 0xee, 0xde, 0x25, 0xd0, 0xc7, 0xad, 0x36, 0x4b, 0x97, 0x41, 0xe3, 0xeb, 0xf7,
	0xef, 0xfb, 0x00, 0xf0, 0x34, 0x5c, 0x3c, 0x84, 0x99, 0x99, 0x7d, 0x07, 0xef, 0x39, 0xff, 0x39,
	0x85, 0xad, 0xcd, 0x80, 0x6d, 0x1c, 0xd4, 0xde, 0xe9, 0x55, 0xc6, 0x42, 0x51, 0xd0, 0xcd, 0xb5,
	0x4b, 0x6c, 0x1a, 0xcd, 0x3e, 0x91, 0x0a, 0x57, 0x6a, 0x1a, 0xad, 0x71, 0x00, 0xc7, 0xfd, 0x94,
	0x63, 0x55, 0xba, 0x9b, 0xc9, 0x8e, 0xbc, 0xde, 0x6a, 0x0b, 0xb0, 0x9d, 0x83, 0x4d, 0xac, 0x1b,
	0xd0, 0xbc, 0x72, 0x89, 0x7b, 0x93, 0x44, 0x65, 0xce, 0xe4, 0x5d, 0xce, 0xb6, 0xfb, 0x38, 0xb3,
	0x28, 0xc7, 0x7d, 0x00, 0x0c, 0xdd, 0xae, 0x14, 0x76, 0x37, 0xd3, 0x9b, 0xd2, 0xc1, 0xfe, 0xbe,
	0xa3, 0x42, 0x6f, 0xe5, 0x7a, 0x03, 0x2f, 0x8c, 0x2e, 0x69, 0xac, 0xc2, 0x95, 0xa4, 0xf1, 0x3a,
	0x3e, 0xc9, 0xd7, 0xfb, 0xf4, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x71, 0x53, 0x88, 0x98, 0x4d, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonoHubClient is the client API for MonoHub service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonoHubClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	Commits(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Blobs(ctx context.Context, in *BlobRequest, opts ...grpc.CallOption) (*BlobResponse, error)
	Trees(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error)
	References(ctx context.Context, in *ReferenceRequest, opts ...grpc.CallOption) (*ReferenceResponse, error)
}

type monoHubClient struct {
	cc *grpc.ClientConn
}

func NewMonoHubClient(cc *grpc.ClientConn) MonoHubClient {
	return &monoHubClient{cc}
}

func (c *monoHubClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := c.cc.Invoke(ctx, "/monohub.MonoHub/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monoHubClient) Commits(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/monohub.MonoHub/Commits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monoHubClient) Blobs(ctx context.Context, in *BlobRequest, opts ...grpc.CallOption) (*BlobResponse, error) {
	out := new(BlobResponse)
	err := c.cc.Invoke(ctx, "/monohub.MonoHub/Blobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monoHubClient) Trees(ctx context.Context, in *TreeRequest, opts ...grpc.CallOption) (*TreeResponse, error) {
	out := new(TreeResponse)
	err := c.cc.Invoke(ctx, "/monohub.MonoHub/Trees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monoHubClient) References(ctx context.Context, in *ReferenceRequest, opts ...grpc.CallOption) (*ReferenceResponse, error) {
	out := new(ReferenceResponse)
	err := c.cc.Invoke(ctx, "/monohub.MonoHub/References", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonoHubServer is the server API for MonoHub service.
type MonoHubServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	Commits(context.Context, *CommitRequest) (*CommitResponse, error)
	Blobs(context.Context, *BlobRequest) (*BlobResponse, error)
	Trees(context.Context, *TreeRequest) (*TreeResponse, error)
	References(context.Context, *ReferenceRequest) (*ReferenceResponse, error)
}

func RegisterMonoHubServer(s *grpc.Server, srv MonoHubServer) {
	s.RegisterService(&_MonoHub_serviceDesc, srv)
}

func _MonoHub_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoHubServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monohub.MonoHub/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoHubServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonoHub_Commits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoHubServer).Commits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monohub.MonoHub/Commits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoHubServer).Commits(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonoHub_Blobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoHubServer).Blobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monohub.MonoHub/Blobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoHubServer).Blobs(ctx, req.(*BlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonoHub_Trees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoHubServer).Trees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monohub.MonoHub/Trees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoHubServer).Trees(ctx, req.(*TreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MonoHub_References_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonoHubServer).References(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/monohub.MonoHub/References",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonoHubServer).References(ctx, req.(*ReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MonoHub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "monohub.MonoHub",
	HandlerType: (*MonoHubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MonoHub_Ping_Handler,
		},
		{
			MethodName: "Commits",
			Handler:    _MonoHub_Commits_Handler,
		},
		{
			MethodName: "Blobs",
			Handler:    _MonoHub_Blobs_Handler,
		},
		{
			MethodName: "Trees",
			Handler:    _MonoHub_Trees_Handler,
		},
		{
			MethodName: "References",
			Handler:    _MonoHub_References_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "monohub.proto",
}
